#!/usr/bin/env python3
"""
Simple Claude Project Manager - Practical MCP Server

Instead of complex browser automation, this provides:
- Properly formatted knowledge entries for easy copy-paste
- Project context detection from Claude Desktop
- Clipboard-ready content generation
- Reliable, simple tools that actually work

No browser automation complexity - just practical tools.
"""

import asyncio
import json
import os
import sys
import sqlite3
import subprocess
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path

# MCP imports
try:
    from mcp.server import Server
    from mcp.server.stdio import stdio_server
    from mcp.types import Tool, Resource, TextContent, ImageContent
    from pydantic import BaseModel
except ImportError:
    print("Error: MCP SDK not installed. Run: pip install mcp", file=sys.stderr)
    sys.exit(1)


class ProjectKnowledge(BaseModel):
    """Structure for project knowledge entries"""
    title: str
    content: str
    category: str = "general"
    tags: List[str] = []
    importance: int = 3  # 1-5 scale
    project_context: Optional[str] = None


class SimpleProjectManager:
    """Simple, reliable project knowledge management"""
    
    def __init__(self):
        self.claude_db_path = os.path.expanduser("~/Library/Application Support/Claude/claudeSQLite.db")
        
    def detect_current_project(self) -> Dict[str, str]:
        """Detect current project context from various sources"""
        context = {
            'project_id': None,
            'project_name': None,
            'source': 'unknown'
        }
        
        # Method 1: Check Claude Desktop's database for recent activity
        try:
            if os.path.exists(self.claude_db_path):
                with sqlite3.connect(self.claude_db_path) as conn:
                    cursor = conn.cursor()
                    
                    # Look for recent notes that might indicate project context
                    cursor.execute("""
                        SELECT title, content FROM notes 
                        ORDER BY created_at DESC LIMIT 5
                    """)
                    
                    recent_notes = cursor.fetchall()
                    for title, content in recent_notes:
                        # Look for project patterns in recent notes
                        if any(term in title.lower() for term in ['mcp', 'project', 'dashboard']):
                            context['project_name'] = title.split()[0] if title else 'Recent Project'
                            context['source'] = 'claude_db'
                            break
                            
        except Exception as e:
            print(f"Note: Could not check Claude database: {e}", file=sys.stderr)
        
        # Method 2: Check for running Claude Desktop processes
        try:
            result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
            if 'Claude' in result.stdout:
                context['source'] = 'process_detected'
        except Exception:
            pass
            
        return context
    
    def format_knowledge_entry(self, knowledge: ProjectKnowledge) -> str:
        """Format knowledge entry for easy copying into Claude projects"""
        
        # Create a beautifully formatted entry
        formatted = f"""# {knowledge.title}

**Category:** {knowledge.category}  
**Importance:** {knowledge.importance}/5  
**Tags:** {', '.join(knowledge.tags) if knowledge.tags else 'None'}  
**Created:** {datetime.now().strftime('%Y-%m-%d %H:%M')}

## Content

{knowledge.content}

---
*Generated by Claude MCP Project Manager*"""
        
        return formatted
    
    def format_for_claude_instructions(self, knowledge: ProjectKnowledge) -> str:
        """Format knowledge as Claude project instructions"""
        
        formatted = f"""## {knowledge.title}

{knowledge.content}

**Context:** {knowledge.category} | **Priority:** {knowledge.importance}/5 | **Tags:** {', '.join(knowledge.tags)}

"""
        return formatted
    
    def save_to_clipboard(self, content: str) -> bool:
        """Save content to clipboard (macOS)"""
        try:
            process = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
            process.communicate(content.encode('utf-8'))
            return True
        except Exception as e:
            print(f"Could not copy to clipboard: {e}", file=sys.stderr)
            return False
    
    def save_to_file(self, content: str, filename: str = None) -> str:
        """Save content to a file for easy access"""
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"claude_knowledge_{timestamp}.md"
        
        filepath = os.path.expanduser(f"~/Desktop/{filename}")
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            return filepath
        except Exception as e:
            print(f"Could not save to file: {e}", file=sys.stderr)
            return ""
    
    def get_project_suggestions(self) -> List[str]:
        """Get project name suggestions from various sources"""
        suggestions = []
        
        # Check recent notes for project names
        try:
            if os.path.exists(self.claude_db_path):
                with sqlite3.connect(self.claude_db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute("SELECT DISTINCT title FROM notes WHERE title LIKE '%project%' OR title LIKE '%MCP%' OR title LIKE '%dashboard%' ORDER BY created_at DESC LIMIT 10")
                    
                    for (title,) in cursor.fetchall():
                        if title and len(title) > 3:
                            suggestions.append(title[:50])  # Truncate long titles
                            
        except Exception:
            pass
        
        # Add common project types
        common_projects = [
            "MCP Memory Dashboard",
            "Robot Logger Project", 
            "SAP Integration Server",
            "Data Analysis Project",
            "Development Tools"
        ]
        
        return suggestions + common_projects


# Initialize the manager
manager = SimpleProjectManager()

# Create MCP server
server = Server("claude-simple-project-manager")

# Define MCP tools
@server.list_tools()
async def list_tools() -> List[Tool]:
    """List available tools"""
    return [
        Tool(
            name="prepare_project_knowledge",
            description="Create perfectly formatted knowledge entry ready for copying into Claude projects. Much more reliable than browser automation.",
            inputSchema={
                "type": "object",
                "properties": {
                    "title": {"type": "string", "description": "Clear, descriptive title for this knowledge"},
                    "content": {"type": "string", "description": "Detailed content of the knowledge"},
                    "category": {"type": "string", "description": "Category like 'technical', 'business', 'preferences'", "default": "general"},
                    "tags": {"type": "array", "items": {"type": "string"}, "description": "Tags for organization"},
                    "importance": {"type": "integer", "minimum": 1, "maximum": 5, "description": "Importance level (1=low, 5=critical)", "default": 3},
                    "save_to_clipboard": {"type": "boolean", "description": "Copy formatted content to clipboard", "default": True},
                    "save_to_file": {"type": "boolean", "description": "Save formatted content to Desktop file", "default": False}
                },
                "required": ["title", "content"]
            }
        ),
        Tool(
            name="format_as_instructions",
            description="Format knowledge as Claude project instructions (for the instructions section rather than knowledge section).",
            inputSchema={
                "type": "object",
                "properties": {
                    "title": {"type": "string", "description": "Instruction title"},
                    "content": {"type": "string", "description": "Instruction content"},
                    "category": {"type": "string", "description": "Category", "default": "guidelines"},
                    "tags": {"type": "array", "items": {"type": "string"}, "description": "Tags"},
                    "importance": {"type": "integer", "minimum": 1, "maximum": 5, "default": 3},
                    "save_to_clipboard": {"type": "boolean", "description": "Copy to clipboard", "default": True}
                },
                "required": ["title", "content"]
            }
        ),
        Tool(
            name="detect_project_context",
            description="Detect current Claude project context from local data and running processes.",
            inputSchema={
                "type": "object",
                "properties": {},
                "additionalProperties": False
            }
        ),
        Tool(
            name="get_project_suggestions",
            description="Get suggestions for project names based on recent activity and common patterns.",
            inputSchema={
                "type": "object",
                "properties": {},
                "additionalProperties": False
            }
        )
    ]

@server.call_tool()
async def call_tool(name: str, arguments: dict) -> List[TextContent]:
    """Handle tool calls"""
    
    if name == "prepare_project_knowledge":
        knowledge = ProjectKnowledge(
            title=arguments["title"],
            content=arguments["content"],
            category=arguments.get("category", "general"),
            tags=arguments.get("tags", []),
            importance=arguments.get("importance", 3)
        )
        
        # Format the knowledge entry
        formatted_content = manager.format_knowledge_entry(knowledge)
        
        # Handle clipboard and file saving
        clipboard_saved = False
        file_saved = ""
        
        if arguments.get("save_to_clipboard", True):
            clipboard_saved = manager.save_to_clipboard(formatted_content)
        
        if arguments.get("save_to_file", False):
            file_saved = manager.save_to_file(formatted_content)
        
        # Prepare response
        response = f"""✅ **Knowledge Entry Formatted Successfully!**

**Title:** {knowledge.title}  
**Category:** {knowledge.category} | **Importance:** {knowledge.importance}/5  
**Tags:** {', '.join(knowledge.tags) if knowledge.tags else 'None'}

"""
        
        if clipboard_saved:
            response += "📋 **Copied to clipboard** - Ready to paste into your Claude project!\n"
        
        if file_saved:
            response += f"💾 **Saved to file:** {file_saved}\n"
        
        response += f"""
**Next Steps:**
1. Go to your Claude project: https://claude.ai/project/019763b5-7ee3-7585-9bde-18f5a8a387be
2. Click on "Project knowledge" section
3. Click "Add knowledge" 
4. Paste the formatted content (Cmd+V)

**Formatted Content Preview:**
```
{formatted_content[:200]}...
```"""
        
        return [TextContent(type="text", text=response)]
    
    elif name == "format_as_instructions":
        knowledge = ProjectKnowledge(
            title=arguments["title"],
            content=arguments["content"],
            category=arguments.get("category", "guidelines"),
            tags=arguments.get("tags", []),
            importance=arguments.get("importance", 3)
        )
        
        # Format as instructions
        formatted_content = manager.format_for_claude_instructions(knowledge)
        
        clipboard_saved = False
        if arguments.get("save_to_clipboard", True):
            clipboard_saved = manager.save_to_clipboard(formatted_content)
        
        response = f"""✅ **Project Instructions Formatted!**

**Title:** {knowledge.title}  
**Category:** {knowledge.category} | **Priority:** {knowledge.importance}/5

"""
        
        if clipboard_saved:
            response += "📋 **Copied to clipboard** - Ready to paste into project instructions!\n"
        
        response += f"""
**Next Steps:**
1. Go to your Claude project settings
2. Find the "Instructions" or "System prompt" section  
3. Paste the formatted instructions (Cmd+V)

**Formatted Instructions Preview:**
```
{formatted_content[:200]}...
```"""
        
        return [TextContent(type="text", text=response)]
    
    elif name == "detect_project_context":
        context = manager.detect_current_project()
        
        response = f"""# Project Context Detection

🎯 **Current Context:**
- **Project Name:** {context['project_name'] or 'Not detected'}
- **Project ID:** {context['project_id'] or 'Not detected'}  
- **Detection Source:** {context['source']}

"""
        
        if context['project_name']:
            response += f"""✅ **Project Detected:** {context['project_name']}

You can now create knowledge entries that will be properly formatted for this project context.
"""
        else:
            response += """⚠️ **No Project Context Detected**

**Suggestions:**
1. Make sure Claude Desktop is running
2. Open your project in Claude Desktop or web interface
3. Recent project activity helps with detection

You can still create knowledge entries - they'll be formatted for manual addition to any project.
"""
        
        response += f"""
**Your Recent Project Activity:**
Based on Claude Desktop's local data, here are projects you've worked on recently.
Use `get_project_suggestions` to see specific project names.
"""
        
        return [TextContent(type="text", text=response)]
    
    elif name == "get_project_suggestions":
        suggestions = manager.get_project_suggestions()
        
        response = "# Project Name Suggestions\n\n"
        
        if suggestions:
            response += "**Based on your recent activity:**\n"
            for i, suggestion in enumerate(suggestions[:10], 1):
                response += f"{i}. {suggestion}\n"
            response += "\n"
        
        response += """**Quick Project Setup:**
- Use these names when creating knowledge entries
- They help organize content by project context
- You can always specify custom project names

**Common Project Types:**
- Technical documentation projects
- Business process projects  
- Development tool projects
- Analysis and research projects
"""
        
        return [TextContent(type="text", text=response)]
    
    else:
        return [TextContent(
            type="text",
            text=f"Unknown tool: {name}"
        )]


async def main():
    """Main entry point for the MCP server"""
    async with stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            server.create_initialization_options()
        )


if __name__ == "__main__":
    asyncio.run(main())